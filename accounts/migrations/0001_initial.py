# Generated by Django 2.2 on 2019-11-07 07:05

import accounts.managers
import accounts.models
import accounts.utils
import core.validators
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='GroomsbroCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=128, unique=True)),
                ('code', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name': 'groomsbro_code',
                'verbose_name_plural': 'groomsbro_codes',
                'unique_together': {('username', 'code')},
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email')),
                ('username', models.CharField(error_messages={'invalid': 'Letters, numbers, dashes, and underscores only. Username must be between 3 and 20 characters.', 'unique': 'A user with that username already exists.'}, help_text='Letters, numbers, dashes, and underscores only. Username must be between 3 and 20 characters.', max_length=20, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(), accounts.utils.CustomUsernameValidator(), accounts.utils.username_blacklist_validator, django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(20)], verbose_name='username')),
                ('phone_number_country_code', models.CharField(blank=True, choices=[('93', 'Afghanistan'), ('355', 'Albania'), ('213', 'Algeria'), ('1', 'American Samoa'), ('376', 'Andorra'), ('244', 'Angola'), ('1', 'Anguilla'), ('1', 'Antigua & Barbuda'), ('54', 'Argentina'), ('374', 'Armenia'), ('297', 'Aruba'), ('61', 'Australia'), ('43', 'Austria'), ('994', 'Azerbaijan'), ('1', 'Bahamas'), ('973', 'Bahrain'), ('880', 'Bangladesh'), ('1', 'Barbasos'), ('375', 'Belarus'), ('32', 'Belgium'), ('501', 'Belize'), ('229', 'Benin'), ('1', 'Bermuda'), ('975', 'Bhutan'), ('591', 'Bolivia'), ('387', 'Bosnia & Herzegovina'), ('267', 'Botswana'), ('55', 'Brazil'), ('1', 'British Virgin Islands'), ('673', 'Brunei'), ('359', 'Bulgaria'), ('226', 'Burkina Faso'), ('257', 'Burundi'), ('855', 'Cambodia'), ('237', 'Cameroon'), ('1', 'Canada'), ('238', 'Cape Verde'), ('599', 'Caribbean Netherlands'), ('1', 'Cayman Islands'), ('236', 'Central African Republic'), ('235', 'Chad'), ('56', 'Chile'), ('86', 'China'), ('57', 'Colombia'), ('269', 'Comoros'), ('242', 'Congo - Brazzaville'), ('243', 'Congo - Kinshasa'), ('682', 'Cook Islands'), ('506', 'Costa Rica'), ('385', 'Croatia'), ('53', 'Cuba'), ('599', 'Curaçao'), ('357', 'Cyprus'), ('420', 'Czechia'), ('225', 'Côte d’Ivoire'), ('45', 'Denmark'), ('253', 'Djibouti'), ('1', 'Dominica'), ('1', 'Dominican Republic'), ('593', 'Ecuador'), ('20', 'Egypt'), ('503', 'El Salvador'), ('240', 'Equatorial Guinea'), ('291', 'Eritrea'), ('372', 'Estonia'), ('268', 'Eswatini'), ('251', 'Ethiopia'), ('500', 'Falkland Islan'), ('298', 'Faroe Islands'), ('679', 'Fiji'), ('358', 'Finland'), ('33', 'France'), ('594', 'French Guiana'), ('689', 'French Polynesia'), ('241', 'Gabon'), ('220', 'Gambia'), ('995', 'Georgia'), ('49', 'Germany'), ('233', 'Ghana'), ('350', 'Gibraltar'), ('30', 'Greece'), ('299', 'Greenland'), ('1', 'Grenada'), ('590', 'Guadeloupe'), ('1', 'Guam'), ('502', 'Guatemala'), ('224', 'Guinea'), ('245', 'Guinea-Bissau'), ('592', 'Guyana'), ('509', 'Haiti'), ('504', 'Honduras'), ('852', 'Hong Kong SAR China'), ('36', 'Hungary'), ('354', 'Iceland'), ('91', 'India'), ('62', 'Indonesia'), ('870', 'Inmarsat'), ('98', 'Iran'), ('964', 'Iraq'), ('353', 'Ireland'), ('881', 'Iridium'), ('44', 'Isle of Man'), ('972', 'Israel'), ('39', 'Italy'), ('1', 'Jamaica'), ('81', 'Japan'), ('44', 'Jersey'), ('962', 'Jordan'), ('7', 'Kazakhstan'), ('254', 'Kenya'), ('686', 'Kiribati'), ('386', 'Kosovo'), ('965', 'Kuwait'), ('996', 'Kyrgyzstan'), ('856', 'Laos'), ('371', 'Latvia'), ('961', 'Lebanon'), ('266', 'Lesotho'), ('231', 'Liberia'), ('218', 'Libya'), ('423', 'Liechtenstein'), ('370', 'Lithuania'), ('352', 'Luxembourg'), ('853', 'Macao SAR China'), ('261', 'Madagascar'), ('265', 'Malawi'), ('60', 'Malaysia'), ('960', 'Maldives'), ('223', 'Mali'), ('356', 'Malta'), ('596', 'Martinique'), ('222', 'Mauritania'), ('230', 'Mauritius'), ('262', 'Mayotte'), ('52', 'Mexico'), ('691', 'Micronesia'), ('373', 'Moldova'), ('377', 'Monaco'), ('976', 'Mongolia'), ('382', 'Montenegro'), ('1', 'Montserrat'), ('212', 'Morocco'), ('258', 'Mozambique'), ('95', 'Myanmar (Burma)'), ('264', 'Namibia'), ('674', 'Nauru'), ('977', 'Nepal'), ('31', 'Netherlands'), ('687', 'New Caledonia'), ('64', 'New Zealand'), ('505', 'Nicaragua'), ('227', 'Niger'), ('234', 'Nigeria'), ('672', 'Norfolk Island'), ('389', 'North Macedonia'), ('1', 'Northern Mariana Islands'), ('47', 'Norway'), ('968', 'Oman'), ('92', 'Pakistan'), ('970', 'Palestinian Territories'), ('507', 'Panama'), ('675', 'Papua New Guinea'), ('595', 'Paraguay'), ('51', 'Peru'), ('63', 'Philippines'), ('48', 'Poland'), ('351', 'Portugal'), ('1', 'Puerto Rico'), ('974', 'Qatar'), ('40', 'Romania'), ('7', 'Russia'), ('250', 'Rwanda'), ('262', 'Réunion'), ('685', 'Samoa'), ('378', 'San Marino'), ('966', 'Saudi Arabia'), ('221', 'Senegal'), ('381', 'Serbia'), ('248', 'Seychelles'), ('232', 'Sierra Leone'), ('65', 'Singapore'), ('1', 'Sint Maarten'), ('421', 'Slovakia'), ('386', 'Slovenia'), ('677', 'Solomon Islands'), ('252', 'Somalia'), ('27', 'South Africa'), ('82', 'South Korea'), ('211', 'South Sudan'), ('34', 'Spain'), ('94', 'Sri Lanka'), ('1', 'St. Kitts & Nevis'), ('1', 'St. Lucia'), ('590', 'St. Martin'), ('1', 'St. Vincent & Grenadines'), ('597', 'Suriname'), ('46', 'Sweden'), ('41', 'Switzerland'), ('239', 'São Tomé & Príncipe'), ('886', 'Taiwan'), ('992', 'Tajikistan'), ('255', 'Tanzania'), ('66', 'Thailand'), ('882', 'Thuraya'), ('670', 'Timor-Leste'), ('228', 'Togo'), ('676', 'Tonga'), ('1', 'Trinida'), ('216', 'Tunisia'), ('90', 'Turkey'), ('993', 'Turkmenistan'), ('1', 'Turks & Caicos Islands'), ('688', 'Tuvalu'), ('1', 'U.S. Virgin Islands'), ('256', 'Uganda'), ('380', 'Ukraine'), ('971', 'United Arab Emirates'), ('44', 'United King'), ('1', 'United States'), ('598', 'Uruguay'), ('998', 'Uzbekistan'), ('678', 'Vanuatu'), ('58', 'Venezuela'), ('84', 'Vietnam'), ('967', 'Yemen'), ('260', 'Zambia'), ('263', 'Zimbabwe')], max_length=5, null=True, verbose_name='phone number country code')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('permalink_id', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('is_email_verified', models.BooleanField(default=False, help_text='Designates whether the email address is verified by a provided verification link.', verbose_name='email verified')),
                ('email_verification_sent_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('email_verification_expiration_datetime', models.DateTimeField(default=accounts.models.verification_expiration_calculator)),
                ('email_verification_sent_count', models.IntegerField(default=1)),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='name')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=128, null=True)),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('F2M', 'F2M'), ('M2F', 'M2F'), ('OTHER', 'Other')], max_length=32, null=True, verbose_name='gender')),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('avatar', models.ImageField(blank=True, default='pics/users/_default/avatar/default.jpg', max_length=255, upload_to=accounts.models.avatar_upload_to, validators=[core.validators.FileValidator(max_size=15728640)])),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.managers.UserManager()),
            ],
        ),
    ]
